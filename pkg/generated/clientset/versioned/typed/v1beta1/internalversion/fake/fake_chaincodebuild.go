/*
 * Copyright contributors to the Hyperledger Fabric Operator project
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 * 	  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta1 "github.com/IBM-Blockchain/fabric-operator/api/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeChaincodeBuilds implements ChaincodeBuildInterface
type FakeChaincodeBuilds struct {
	Fake *FakeIbp
}

var chaincodebuildsResource = schema.GroupVersionResource{Group: "ibp.com", Version: "", Resource: "chaincodebuilds"}

var chaincodebuildsKind = schema.GroupVersionKind{Group: "ibp.com", Version: "", Kind: "ChaincodeBuild"}

// Get takes name of the chaincodeBuild, and returns the corresponding chaincodeBuild object, and an error if there is any.
func (c *FakeChaincodeBuilds) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.ChaincodeBuild, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(chaincodebuildsResource, name), &v1beta1.ChaincodeBuild{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ChaincodeBuild), err
}

// List takes label and field selectors, and returns the list of ChaincodeBuilds that match those selectors.
func (c *FakeChaincodeBuilds) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.ChaincodeBuildList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(chaincodebuildsResource, chaincodebuildsKind, opts), &v1beta1.ChaincodeBuildList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.ChaincodeBuildList{ListMeta: obj.(*v1beta1.ChaincodeBuildList).ListMeta}
	for _, item := range obj.(*v1beta1.ChaincodeBuildList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested chaincodeBuilds.
func (c *FakeChaincodeBuilds) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(chaincodebuildsResource, opts))
}

// Create takes the representation of a chaincodeBuild and creates it.  Returns the server's representation of the chaincodeBuild, and an error, if there is any.
func (c *FakeChaincodeBuilds) Create(ctx context.Context, chaincodeBuild *v1beta1.ChaincodeBuild, opts v1.CreateOptions) (result *v1beta1.ChaincodeBuild, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(chaincodebuildsResource, chaincodeBuild), &v1beta1.ChaincodeBuild{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ChaincodeBuild), err
}

// Update takes the representation of a chaincodeBuild and updates it. Returns the server's representation of the chaincodeBuild, and an error, if there is any.
func (c *FakeChaincodeBuilds) Update(ctx context.Context, chaincodeBuild *v1beta1.ChaincodeBuild, opts v1.UpdateOptions) (result *v1beta1.ChaincodeBuild, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(chaincodebuildsResource, chaincodeBuild), &v1beta1.ChaincodeBuild{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ChaincodeBuild), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeChaincodeBuilds) UpdateStatus(ctx context.Context, chaincodeBuild *v1beta1.ChaincodeBuild, opts v1.UpdateOptions) (*v1beta1.ChaincodeBuild, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(chaincodebuildsResource, "status", chaincodeBuild), &v1beta1.ChaincodeBuild{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ChaincodeBuild), err
}

// Delete takes name of the chaincodeBuild and deletes it. Returns an error if one occurs.
func (c *FakeChaincodeBuilds) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(chaincodebuildsResource, name), &v1beta1.ChaincodeBuild{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeChaincodeBuilds) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(chaincodebuildsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.ChaincodeBuildList{})
	return err
}

// Patch applies the patch and returns the patched chaincodeBuild.
func (c *FakeChaincodeBuilds) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.ChaincodeBuild, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(chaincodebuildsResource, name, pt, data, subresources...), &v1beta1.ChaincodeBuild{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.ChaincodeBuild), err
}
