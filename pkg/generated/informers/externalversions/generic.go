/*
 * Copyright contributors to the Hyperledger Fabric Operator project
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 * 	  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by informer-gen. DO NOT EDIT.

package externalversions

import (
	"fmt"

	v1beta1 "github.com/IBM-Blockchain/fabric-operator/api/v1beta1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
)

// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
// sharedInformers based on type
type GenericInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() cache.GenericLister
}

type genericInformer struct {
	informer cache.SharedIndexInformer
	resource schema.GroupResource
}

// Informer returns the SharedIndexInformer.
func (f *genericInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

// Lister returns the GenericLister.
func (f *genericInformer) Lister() cache.GenericLister {
	return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
}

// ForResource gives generic access to a shared informer of the matching type
// TODO extend this to unknown resources with a client pool
func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
	switch resource {
	// Group=ibp.com, Version=v1beta1
	case v1beta1.SchemeGroupVersion.WithResource("chaincodes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ibp().V1beta1().Chaincodes().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("chaincodebuilds"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ibp().V1beta1().ChaincodeBuilds().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("channels"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ibp().V1beta1().Channels().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("endorsepolicies"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ibp().V1beta1().EndorsePolicies().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("federations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ibp().V1beta1().Federations().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("ibpcas"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ibp().V1beta1().IBPCAs().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("ibpconsoles"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ibp().V1beta1().IBPConsoles().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("ibporderers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ibp().V1beta1().IBPOrderers().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("ibppeers"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ibp().V1beta1().IBPPeers().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("networks"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ibp().V1beta1().Networks().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("organizations"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ibp().V1beta1().Organizations().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("proposals"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ibp().V1beta1().Proposals().Informer()}, nil
	case v1beta1.SchemeGroupVersion.WithResource("votes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Ibp().V1beta1().Votes().Informer()}, nil

	}

	return nil, fmt.Errorf("no informer found for %v", resource)
}
