/*
 * Copyright contributors to the Hyperledger Fabric Operator project
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 * 	  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/IBM-Blockchain/fabric-operator/api/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IBPPeerLister helps list IBPPeers.
// All objects returned here must be treated as read-only.
type IBPPeerLister interface {
	// List lists all IBPPeers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.IBPPeer, err error)
	// IBPPeers returns an object that can list and get IBPPeers.
	IBPPeers(namespace string) IBPPeerNamespaceLister
	IBPPeerListerExpansion
}

// iBPPeerLister implements the IBPPeerLister interface.
type iBPPeerLister struct {
	indexer cache.Indexer
}

// NewIBPPeerLister returns a new IBPPeerLister.
func NewIBPPeerLister(indexer cache.Indexer) IBPPeerLister {
	return &iBPPeerLister{indexer: indexer}
}

// List lists all IBPPeers in the indexer.
func (s *iBPPeerLister) List(selector labels.Selector) (ret []*v1beta1.IBPPeer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.IBPPeer))
	})
	return ret, err
}

// IBPPeers returns an object that can list and get IBPPeers.
func (s *iBPPeerLister) IBPPeers(namespace string) IBPPeerNamespaceLister {
	return iBPPeerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IBPPeerNamespaceLister helps list and get IBPPeers.
// All objects returned here must be treated as read-only.
type IBPPeerNamespaceLister interface {
	// List lists all IBPPeers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.IBPPeer, err error)
	// Get retrieves the IBPPeer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.IBPPeer, error)
	IBPPeerNamespaceListerExpansion
}

// iBPPeerNamespaceLister implements the IBPPeerNamespaceLister
// interface.
type iBPPeerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IBPPeers in the indexer for a given namespace.
func (s iBPPeerNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.IBPPeer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.IBPPeer))
	})
	return ret, err
}

// Get retrieves the IBPPeer from the indexer for a given namespace and name.
func (s iBPPeerNamespaceLister) Get(name string) (*v1beta1.IBPPeer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("ibppeer"), name)
	}
	return obj.(*v1beta1.IBPPeer), nil
}
