/*
 * Copyright contributors to the Hyperledger Fabric Operator project
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 * 	  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/IBM-Blockchain/fabric-operator/api/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OrganizationLister helps list Organizations.
// All objects returned here must be treated as read-only.
type OrganizationLister interface {
	// List lists all Organizations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Organization, err error)
	// Get retrieves the Organization from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.Organization, error)
	OrganizationListerExpansion
}

// organizationLister implements the OrganizationLister interface.
type organizationLister struct {
	indexer cache.Indexer
}

// NewOrganizationLister returns a new OrganizationLister.
func NewOrganizationLister(indexer cache.Indexer) OrganizationLister {
	return &organizationLister{indexer: indexer}
}

// List lists all Organizations in the indexer.
func (s *organizationLister) List(selector labels.Selector) (ret []*v1beta1.Organization, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Organization))
	})
	return ret, err
}

// Get retrieves the Organization from the index for a given name.
func (s *organizationLister) Get(name string) (*v1beta1.Organization, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("organization"), name)
	}
	return obj.(*v1beta1.Organization), nil
}
