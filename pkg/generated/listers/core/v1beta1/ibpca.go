/*
 * Copyright contributors to the Hyperledger Fabric Operator project
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 * 	  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/IBM-Blockchain/fabric-operator/api/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IBPCALister helps list IBPCAs.
// All objects returned here must be treated as read-only.
type IBPCALister interface {
	// List lists all IBPCAs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.IBPCA, err error)
	// IBPCAs returns an object that can list and get IBPCAs.
	IBPCAs(namespace string) IBPCANamespaceLister
	IBPCAListerExpansion
}

// iBPCALister implements the IBPCALister interface.
type iBPCALister struct {
	indexer cache.Indexer
}

// NewIBPCALister returns a new IBPCALister.
func NewIBPCALister(indexer cache.Indexer) IBPCALister {
	return &iBPCALister{indexer: indexer}
}

// List lists all IBPCAs in the indexer.
func (s *iBPCALister) List(selector labels.Selector) (ret []*v1beta1.IBPCA, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.IBPCA))
	})
	return ret, err
}

// IBPCAs returns an object that can list and get IBPCAs.
func (s *iBPCALister) IBPCAs(namespace string) IBPCANamespaceLister {
	return iBPCANamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IBPCANamespaceLister helps list and get IBPCAs.
// All objects returned here must be treated as read-only.
type IBPCANamespaceLister interface {
	// List lists all IBPCAs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.IBPCA, err error)
	// Get retrieves the IBPCA from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.IBPCA, error)
	IBPCANamespaceListerExpansion
}

// iBPCANamespaceLister implements the IBPCANamespaceLister
// interface.
type iBPCANamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IBPCAs in the indexer for a given namespace.
func (s iBPCANamespaceLister) List(selector labels.Selector) (ret []*v1beta1.IBPCA, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.IBPCA))
	})
	return ret, err
}

// Get retrieves the IBPCA from the indexer for a given namespace and name.
func (s iBPCANamespaceLister) Get(name string) (*v1beta1.IBPCA, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("ibpca"), name)
	}
	return obj.(*v1beta1.IBPCA), nil
}
