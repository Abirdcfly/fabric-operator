// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/IBM-Blockchain/fabric-operator/pkg/offering/base/organization"
)

type Update struct {
	AdminUpdatedStub        func() bool
	adminUpdatedMutex       sync.RWMutex
	adminUpdatedArgsForCall []struct {
	}
	adminUpdatedReturns struct {
		result1 bool
	}
	adminUpdatedReturnsOnCall map[int]struct {
		result1 bool
	}
	ClientsUpdatedStub        func() bool
	clientsUpdatedMutex       sync.RWMutex
	clientsUpdatedArgsForCall []struct {
	}
	clientsUpdatedReturns struct {
		result1 bool
	}
	clientsUpdatedReturnsOnCall map[int]struct {
		result1 bool
	}
	SpecUpdatedStub        func() bool
	specUpdatedMutex       sync.RWMutex
	specUpdatedArgsForCall []struct {
	}
	specUpdatedReturns struct {
		result1 bool
	}
	specUpdatedReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Update) AdminUpdated() bool {
	fake.adminUpdatedMutex.Lock()
	ret, specificReturn := fake.adminUpdatedReturnsOnCall[len(fake.adminUpdatedArgsForCall)]
	fake.adminUpdatedArgsForCall = append(fake.adminUpdatedArgsForCall, struct {
	}{})
	fake.recordInvocation("AdminUpdated", []interface{}{})
	fake.adminUpdatedMutex.Unlock()
	if fake.AdminUpdatedStub != nil {
		return fake.AdminUpdatedStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.adminUpdatedReturns
	return fakeReturns.result1
}

func (fake *Update) AdminUpdatedCallCount() int {
	fake.adminUpdatedMutex.RLock()
	defer fake.adminUpdatedMutex.RUnlock()
	return len(fake.adminUpdatedArgsForCall)
}

func (fake *Update) AdminUpdatedCalls(stub func() bool) {
	fake.adminUpdatedMutex.Lock()
	defer fake.adminUpdatedMutex.Unlock()
	fake.AdminUpdatedStub = stub
}

func (fake *Update) AdminUpdatedReturns(result1 bool) {
	fake.adminUpdatedMutex.Lock()
	defer fake.adminUpdatedMutex.Unlock()
	fake.AdminUpdatedStub = nil
	fake.adminUpdatedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *Update) AdminUpdatedReturnsOnCall(i int, result1 bool) {
	fake.adminUpdatedMutex.Lock()
	defer fake.adminUpdatedMutex.Unlock()
	fake.AdminUpdatedStub = nil
	if fake.adminUpdatedReturnsOnCall == nil {
		fake.adminUpdatedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.adminUpdatedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *Update) ClientsUpdated() bool {
	fake.clientsUpdatedMutex.Lock()
	ret, specificReturn := fake.clientsUpdatedReturnsOnCall[len(fake.clientsUpdatedArgsForCall)]
	fake.clientsUpdatedArgsForCall = append(fake.clientsUpdatedArgsForCall, struct {
	}{})
	fake.recordInvocation("ClientsUpdated", []interface{}{})
	fake.clientsUpdatedMutex.Unlock()
	if fake.ClientsUpdatedStub != nil {
		return fake.ClientsUpdatedStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.clientsUpdatedReturns
	return fakeReturns.result1
}

func (fake *Update) ClientsUpdatedCallCount() int {
	fake.clientsUpdatedMutex.RLock()
	defer fake.clientsUpdatedMutex.RUnlock()
	return len(fake.clientsUpdatedArgsForCall)
}

func (fake *Update) ClientsUpdatedCalls(stub func() bool) {
	fake.clientsUpdatedMutex.Lock()
	defer fake.clientsUpdatedMutex.Unlock()
	fake.ClientsUpdatedStub = stub
}

func (fake *Update) ClientsUpdatedReturns(result1 bool) {
	fake.clientsUpdatedMutex.Lock()
	defer fake.clientsUpdatedMutex.Unlock()
	fake.ClientsUpdatedStub = nil
	fake.clientsUpdatedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *Update) ClientsUpdatedReturnsOnCall(i int, result1 bool) {
	fake.clientsUpdatedMutex.Lock()
	defer fake.clientsUpdatedMutex.Unlock()
	fake.ClientsUpdatedStub = nil
	if fake.clientsUpdatedReturnsOnCall == nil {
		fake.clientsUpdatedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.clientsUpdatedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *Update) SpecUpdated() bool {
	fake.specUpdatedMutex.Lock()
	ret, specificReturn := fake.specUpdatedReturnsOnCall[len(fake.specUpdatedArgsForCall)]
	fake.specUpdatedArgsForCall = append(fake.specUpdatedArgsForCall, struct {
	}{})
	fake.recordInvocation("SpecUpdated", []interface{}{})
	fake.specUpdatedMutex.Unlock()
	if fake.SpecUpdatedStub != nil {
		return fake.SpecUpdatedStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.specUpdatedReturns
	return fakeReturns.result1
}

func (fake *Update) SpecUpdatedCallCount() int {
	fake.specUpdatedMutex.RLock()
	defer fake.specUpdatedMutex.RUnlock()
	return len(fake.specUpdatedArgsForCall)
}

func (fake *Update) SpecUpdatedCalls(stub func() bool) {
	fake.specUpdatedMutex.Lock()
	defer fake.specUpdatedMutex.Unlock()
	fake.SpecUpdatedStub = stub
}

func (fake *Update) SpecUpdatedReturns(result1 bool) {
	fake.specUpdatedMutex.Lock()
	defer fake.specUpdatedMutex.Unlock()
	fake.SpecUpdatedStub = nil
	fake.specUpdatedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *Update) SpecUpdatedReturnsOnCall(i int, result1 bool) {
	fake.specUpdatedMutex.Lock()
	defer fake.specUpdatedMutex.Unlock()
	fake.SpecUpdatedStub = nil
	if fake.specUpdatedReturnsOnCall == nil {
		fake.specUpdatedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.specUpdatedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *Update) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.adminUpdatedMutex.RLock()
	defer fake.adminUpdatedMutex.RUnlock()
	fake.clientsUpdatedMutex.RLock()
	defer fake.clientsUpdatedMutex.RUnlock()
	fake.specUpdatedMutex.RLock()
	defer fake.specUpdatedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Update) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ organization.Update = new(Update)
